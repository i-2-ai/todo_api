python -c "
import os
import sys
import logging
import sqlite3
from app import create_app, db

# Configure logging to write to both console and file
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/home/site/wwwroot/logs/startup.log')
    ]
)
logger = logging.getLogger()

try:
    # Set up database path
    db_path = os.path.join(os.environ.get('HOME', '/home/site/wwwroot'), 'data', 'todos.db')
    db_dir = os.path.dirname(db_path)
    
    logger.info(f'Setting up database at {db_path}')
    
    # Create directories
    os.makedirs(db_dir, exist_ok=True)
    os.makedirs('/home/site/wwwroot/logs', exist_ok=True)
    
    # Set permissions
    os.chmod(db_dir, 0o777)
    
    # Create table directly with SQL
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Drop existing table if it exists
    cursor.execute('DROP TABLE IF EXISTS todo')
    
    # Create table with explicit schema
    cursor.execute('''
    CREATE TABLE todo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title VARCHAR(100) NOT NULL,
        description VARCHAR(500),
        completed BOOLEAN DEFAULT 0,
        due_date TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()
    
    logger.info('Database table created successfully')
    
    # Initialize app
    app = create_app({
        'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',
        'SQLALCHEMY_TRACK_MODIFICATIONS': False
    })
    
    # Verify schema with SQLAlchemy
    with app.app_context():
        inspector = db.inspect(db.engine)
        columns = {col['name'] for col in inspector.get_columns('todo')}
        required = {'id', 'title', 'description', 'completed', 'due_date', 'created_at'}
        
        logger.info(f'Found columns: {columns}')
        if not required.issubset(columns):
            missing = required - columns
            logger.error(f'Missing columns: {missing}')
            raise Exception(f'Missing required columns: {missing}')
        
        logger.info('Database initialization complete')

except Exception as e:
    logger.error(f'Error during startup: {str(e)}', exc_info=True)
    sys.exit(1)

logger.info('Starting gunicorn...')
" && gunicorn --bind=0.0.0.0:5000 --log-level=debug 'app:create_app()' 