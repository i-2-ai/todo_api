python -c "
import os
import sys
import logging
import sqlite3
from app import create_app, db

# Configure logging to write to both console and file
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/home/site/wwwroot/logs/startup.log')
    ]
)
logger = logging.getLogger()

def verify_table_schema(db_path):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Get table info
        cursor.execute('PRAGMA table_info(todo)')
        columns = cursor.fetchall()
        logger.info(f'Current table schema: {columns}')
        
        # Check if table exists and has correct schema
        column_names = {col[1] for col in columns}
        required = {'id', 'title', 'description', 'completed', 'due_date', 'created_at'}
        
        if not required.issubset(column_names):
            missing = required - column_names
            logger.error(f'Missing columns: {missing}')
            return False
            
        logger.info('Table schema verification successful')
        return True
    except Exception as e:
        logger.error(f'Error verifying schema: {str(e)}')
        return False
    finally:
        if 'conn' in locals():
            conn.close()

try:
    # Set up database path
    db_path = os.path.join(os.environ.get('HOME', '/home/site/wwwroot'), 'data', 'todos.db')
    db_dir = os.path.dirname(db_path)
    
    logger.info(f'Setting up database at {db_path}')
    
    # Create directories
    os.makedirs(db_dir, exist_ok=True)
    os.makedirs('/home/site/wwwroot/logs', exist_ok=True)
    
    # Set permissions
    os.chmod(db_dir, 0o777)
    
    # Create database connection
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Drop existing table if it exists
    logger.info('Dropping existing table if it exists')
    cursor.execute('DROP TABLE IF EXISTS todo')
    conn.commit()
    
    # Create table with explicit schema
    logger.info('Creating table with new schema')
    create_table_sql = '''
    CREATE TABLE todo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title VARCHAR(100) NOT NULL,
        description VARCHAR(500),
        completed INTEGER DEFAULT 0 CHECK (completed IN (0, 1)),
        due_date DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    '''
    cursor.execute(create_table_sql)
    conn.commit()
    
    # Verify table was created
    cursor.execute('SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'todo\'')
    if not cursor.fetchone():
        raise Exception('Table was not created successfully')
    
    # Verify schema
    logger.info('Verifying table schema')
    cursor.execute('PRAGMA table_info(todo)')
    columns = cursor.fetchall()
    logger.info(f'Created table schema: {columns}')
    
    # Close connection
    conn.close()
    
    logger.info('Database table created successfully')
    
    # Initialize app
    app = create_app({
        'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',
        'SQLALCHEMY_TRACK_MODIFICATIONS': False
    })
    
    # Verify with SQLAlchemy
    with app.app_context():
        # Verify schema again after SQLAlchemy initialization
        if not verify_table_schema(db_path):
            raise Exception('Table schema verification failed after SQLAlchemy initialization')
        
        # Test the table with a simple query
        try:
            result = db.session.execute('SELECT * FROM todo LIMIT 1')
            logger.info('SQLAlchemy query test successful')
            logger.info(f'Query result: {result.keys()}')  # Log column names
        except Exception as e:
            logger.error(f'SQLAlchemy query test failed: {str(e)}')
            raise
        
        logger.info('Database initialization complete')

except Exception as e:
    logger.error(f'Error during startup: {str(e)}', exc_info=True)
    sys.exit(1)

logger.info('Starting gunicorn...')
" && gunicorn --bind=0.0.0.0:5000 --log-level=debug --timeout 120 'app:create_app()' 