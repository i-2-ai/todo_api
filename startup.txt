python -c "
import os
import sys
import logging
import sqlite3
from app import create_app, db
from app.models import Todo

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/home/site/wwwroot/logs/startup.log')
    ]
)
logger = logging.getLogger()

def verify_database(db_path):
    try:
        logger.info(f'Verifying database at {db_path}')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Get table info
        cursor.execute('SELECT sql FROM sqlite_master WHERE type=\'table\' AND name=\'todo\'')
        table_sql = cursor.fetchone()
        if table_sql:
            logger.info(f'Current table SQL: {table_sql[0]}')
        else:
            logger.warning('Todo table does not exist')
            
        cursor.execute('PRAGMA table_info(todo)')
        columns = cursor.fetchall()
        logger.info(f'Current table schema: {columns}')
        
        # Check if table exists and has correct schema
        column_names = {col[1] for col in columns}
        required = {'id', 'title', 'description', 'completed', 'due_date', 'created_at'}
        
        if not required.issubset(column_names):
            missing = required - column_names
            logger.error(f'Missing columns: {missing}')
            return False
            
        logger.info('Table schema verification successful')
        return True
    except Exception as e:
        logger.error(f'Error verifying schema: {str(e)}')
        return False
    finally:
        if 'conn' in locals():
            conn.close()

try:
    # Set up database path
    db_path = os.path.join(os.environ.get('HOME', '/home/site/wwwroot'), 'data', 'todos.db')
    db_dir = os.path.dirname(db_path)
    
    logger.info(f'Setting up database at {db_path}')
    
    # Create directories
    os.makedirs(db_dir, exist_ok=True)
    os.makedirs('/home/site/wwwroot/logs', exist_ok=True)
    
    # Set permissions
    os.chmod(db_dir, 0o777)
    
    # Delete existing database file if it exists
    if os.path.exists(db_path):
        logger.info('Removing existing database file')
        os.remove(db_path)
    
    # Initialize app with database URI
    app = create_app({
        'SQLALCHEMY_DATABASE_URI': f'sqlite:///{db_path}',
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,
        'SQLALCHEMY_ECHO': True  # Enable SQL query logging
    })
    
    # Create tables
    with app.app_context():
        logger.info('Creating database tables')
        db.create_all()
        
        # Verify database schema
        if not verify_database(db_path):
            raise Exception('Database schema verification failed')
            
        # Test database connection and schema
        try:
            logger.info('Testing database connection')
            # Create test todo
            test_todo = Todo(
                title='Test Todo',
                description='Testing database connection',
                completed=0
            )
            db.session.add(test_todo)
            db.session.commit()
            logger.info('Successfully added test todo')
            
            # Query the test todo
            result = db.session.query(Todo).first()
            logger.info(f'Successfully queried test todo: {result}')
            
            # Verify the completed field
            logger.info(f'Completed field value: {result.completed}')
            
            # Show all columns from the todo table
            columns = db.session.execute('PRAGMA table_info(todo)').fetchall()
            logger.info(f'Table columns after test: {columns}')
            
            # Clean up test data
            db.session.delete(test_todo)
            db.session.commit()
            logger.info('Successfully cleaned up test data')
            
        except Exception as e:
            logger.error(f'Database test failed: {str(e)}', exc_info=True)
            raise
        
        logger.info('Database initialization complete')

except Exception as e:
    logger.error(f'Error during startup: {str(e)}', exc_info=True)
    sys.exit(1)

logger.info('Starting gunicorn...')
" && gunicorn --bind=0.0.0.0:5000 --log-level=debug --timeout 600 'app:create_app()' 